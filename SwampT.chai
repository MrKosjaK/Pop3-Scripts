class SwampT
{
    def SwampT(_coord, _owner, _deathtick)
    {
        this.coord          = _coord;
        this.Mist           = ThingVector();
        this.Grass          = ThingVector();
        this.mapptr_cache   = ObjectListVector();
        this.owner          = _owner;
        this.deathtick      = _deathtick;
        
        var  pmw            = Vector();
        for (var v = 0; v < 9; ++v)
        {
            var local_coord = this.coord;
            centre_coord3d_on_block(local_coord);
            pmw.insert_at(v, local_coord);
        }
        
        pmw[1].Xpos += 512;
        pmw[2].Xpos -= 512;
        pmw[3].Zpos += 512;
        pmw[4].Zpos -= 512;
        pmw[5].Xpos += 512;
        pmw[5].Zpos += 512;
        pmw[6].Xpos += 512;
        pmw[6].Zpos -= 512;
        pmw[7].Xpos -= 512;
        pmw[7].Zpos += 512;
        pmw[8].Xpos -= 512;
        pmw[8].Zpos -= 512;
        
        for (var mn = 0; mn < pmw.size(); ++mn)
        {
          this.mapptr_cache.push_back(world_coord3d_to_map_ptr(pmw[mn]).MapWhoList);
        }
        this.createThings();
    }
    
    def createThings()
    {
        var crd = Coord3D();
        var coordVect = Vector();
        var colour = [2,-2,-1,1,10,11,12,9];
        for (var i = 0; i < 9; ++i)
        {
            coordVect.insert_at(i, crd);
        }
        
        centre_coord3d_on_block(this.coord);
        coordVect[0]        = this.coord;
        coordVect[1].Xpos   = this.coord.Xpos + 512;
        coordVect[1].Zpos   = this.coord.Zpos;  512
        coordVect[2].Xpos   = this.coord.Xpos - 512;
        coordVect[2].Zpos   = this.coord.Zpos;  512
        coordVect[3].Xpos   = this.coord.Xpos;  512
        coordVect[3].Zpos   = this.coord.Zpos + 512;
        coordVect[4].Xpos   = this.coord.Xpos;  512
        coordVect[4].Zpos   = this.coord.Zpos - 512;
        coordVect[5].Xpos   = this.coord.Xpos + 512;
        coordVect[5].Zpos   = this.coord.Zpos + 512;
        coordVect[6].Xpos   = this.coord.Xpos + 512;
        coordVect[6].Zpos   = this.coord.Zpos - 512;
        coordVect[7].Xpos   = this.coord.Xpos - 512;
        coordVect[7].Zpos   = this.coord.Zpos + 512;
        coordVect[8].Xpos   = this.coord.Xpos - 512;
        coordVect[8].Zpos   = this.coord.Zpos - 512;
        
        for (var c = 0; c < coordVect.size(); ++c)
        {
            coordVect[c].Ypos -= 64;
        }
        
        coordVect.for_each(fun[this, colour](c3d)
        {
            var clr_mist = createThing(T_EFFECT, M_EFFECT_SWAMP_MIST, TRIBE_HOSTBOT, c3d, false, false);
            clr_mist.DrawInfo.Alpha = colour[this.owner];
            this.Mist.push_back(clr_mist);
            if (G_RANDOM(2) == 1)
            {
              this.Grass.push_back(createThing(T_EFFECT, M_EFFECT_REEDY_GRASS, TRIBE_HOSTBOT, c3d, false, false));
            }
        });
    }
    
    def destroyMe()
    {
        this.Mist.for_each(fun(Thing)
        {
            DestroyThing(Thing);
        });
        this.Grass.for_each(fun(Thing)
        {
            DestroyThing(Thing);
        });
    }
    
    def processSwamp()
    {
        ConvertObjectListVectorToThingVector(this.mapptr_cache).for_each(fun[this](t)
        {
            if (t.Type == T_PERSON && 
                !isFlagEnabled(t.Flags2, TF2_THING_IN_AIR) &&
                t.Owner != this.owner && 
                are_players_allied(t.Owner, this.owner) == FALSE && is_person_in_airship(t) == FALSE) 
            { 
                damage_person(t, this.owner, this.dmg, TRUE); 
            }
        });
        
        createThing(T_EFFECT, M_EFFECT_SMOKE, this.owner, this.coord, false, false);
    }
    
    def getAge()
    {
      return this.deathtick;
    }
    
    def getPos()
    {
      return world_coord3d_to_map_idx(this.coord);
    }
    
    def getOwner()
    {
      return this.owner;
    }
    
    def setDamage(_dmg)
    {
        this.dmg = _dmg;
    }
    
    var		  owner;
    var     dmg;
    var     coord;
    var     Mist;
    var     Grass;
    var     mapptr_cache;
}

global activeSwamp  = Vector();
global swamp_int    = 0;

def OnSave(StringVector sv, IntVector iv)
{
  iv.push_back(swamp_int);
  var swampSize = activeSwamp.size();
  iv.push_back(swampSize);
  
  for (var i = 0; i < swampSize; ++i)
  {
    activeSwamp[i].destroyMe();
    iv.push_back(activeSwamp[i].getPos());
    iv.push_back(activeSwamp[i].getOwner());
    iv.push_back(activeSwamp[i].getAge());
  }
  
  activeSwamp.clear();
}

def OnLoad(StringVector sv, IntVector iv)
{
  if (iv.size() > 0)
  {
    swamp_int = iv[0];
    var swampSize = iv[1];
    
    var coord = Coord3D();
    var owner;
    var deathtick;
    var k = 2;
    
    for (var i = 2; i < swampSize+2; k = k + 3)
    {
      ++i;
      var mapidx = iv[k];
      map_idx_to_world_coord3d(mapidx, coord);
      owner = iv[k+1];
      deathtick = iv[k+2];
      activeSwamp.push_back(SwampT(coord, owner, deathtick));
    }
  }
}